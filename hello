@Test
    void testGetClientConfigurationDetails_validationBadRequest() {
        String token = "token";
        String header = "header";
        ClientRequest request = new ClientRequest();

        ClientConfigurationResponse badResponse = new ClientConfigurationResponse();
        badResponse.setResponseCode(StartAnyWhereConstants.HTTP_STATUS_BAD_REQUEST);

        when(fetchClientConfigurationService.validateClientRequest(header, request)).thenReturn(badResponse);

        ResponseEntity<ClientConfigurationResponse> response = controllerMock.getClientConfigurationDetails(token, header, request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(badResponse, response.getBody());
    }

    // --- Missing test for addClientConfiguration: header is empty ---
    @Test
    void addClientConfiguration_headerEmpty_returnsBadRequest() {
        String emptyHeader = "   ";
        String sessionToken = "session";
        ClientConfigurationRequest configRequest = new ClientConfigurationRequest();

        ResponseEntity<Object> response = controllerMock.addClientConfiguration(emptyHeader, sessionToken, configRequest);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Header cannot be empty", response.getBody());
    }

    // --- Missing test for deleteClientDetails: Exception not DataIntegrityViolationException ---
    @Test
    void deleteClientDetails_GenericException_ReturnsNotImplemented() {
        String token = "token";
        String header = "header";
        String clientId = "id";
        when(removeClientService.deleteClientDetails(token, header, clientId))
                .thenThrow(new IllegalArgumentException("Some generic error"));

        ResponseEntity<Object> response = controllerMock.deleteClientDetails(token, header, clientId);

        assertEquals(HttpStatus.NOT_IMPLEMENTED, response.getStatusCode());
        assertTrue(response.getBody() instanceof BaseResponse);
    }

    // --- Missing test for getDeleteClientConfigurationDetails: null email list ---
    @Test
    void getDeleteClientConfigurationDetails_nullEmailList() {
        String sessionToken = "sessionToken";
        String requestHeader = "requestHeader";
        String clientId = "client123";
        String orgName = "orgABC";
        List<String> emailList = null;

        ResponseEntity<Object> expectedResponse = ResponseEntity.ok("Success");

        Mockito.when(deleteClientConfigurationService.getDeleteClientConfigurationDetails(
                Mockito.eq(sessionToken),
                Mockito.eq(requestHeader),
                Mockito.eq(clientId),
                Mockito.eq(orgName),
                Mockito.anyList()
        )).thenReturn(expectedResponse);

        ResponseEntity<Object> actualResponse = controllerMock.getDeleteClientConfigurationDetails(
                sessionToken,
                requestHeader,
                clientId,
                orgName,
                emailList
        );

        assertNotNull(actualResponse);
        assertEquals(HttpStatus.OK, actualResponse.getStatusCode());
        assertEquals("Success", actualResponse.getBody());
    }

    // --- Missing test for getDeleteClientConfigurationDetails: empty email list ---
    @Test
    void getDeleteClientConfigurationDetails_emptyEmailList() {
        String sessionToken = "sessionToken";
        String requestHeader = "requestHeader";
        String clientId = "client123";
        String orgName = "orgABC";
        List<String> emailList = new ArrayList<>();

        ResponseEntity<Object> expectedResponse = ResponseEntity.ok("Success");

        Mockito.when(deleteClientConfigurationService.getDeleteClientConfigurationDetails(
                Mockito.eq(sessionToken),
                Mockito.eq(requestHeader),
                Mockito.eq(clientId),
                Mockito.eq(orgName),
                Mockito.anyList()
        )).thenReturn(expectedResponse);

        ResponseEntity<Object> actualResponse = controllerMock.getDeleteClientConfigurationDetails(
                sessionToken,
                requestHeader,
                clientId,
                orgName,
                emailList
        );

        assertNotNull(actualResponse);
        assertEquals(HttpStatus.OK, actualResponse.getStatusCode());
        assertEquals("Success", actualResponse.getBody());
    }

    // --- Missing test for createClientGroups: throws InterruptedException ---
    @Test
    void testCreateGroups_interruptedException() throws Exception {
        when(groupService.checkValidationBeforeAsync(token, header, clientId, clientName))
            .thenThrow(new InterruptedException("Interrupted"));

        ResponseEntity<CreateGroupsResponse> response = controllerMock.createClientGroups(token, header, clientId, clientName);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals(StartAnyWhereConstants.HTTP_STATUS_INTERNAL_SERVER_ERROR, response.getBody().getResponseCode());
    }

    // --- Missing test for addNewclientdetails: token cleaning/unCleaning logic (simulate both cleanIt and unCleanIt) ---
    @Test
    public void testAddNewclientdetails_tokenCleaningLogic() throws Exception {
        String originalToken = "dirtyToken";
        String originalHeader = "dirtyHeader";
        ClientModel request = new ClientModel();
        request.setClientId("00095");

        String cleanedToken = "cleanedToken";
        String cleanedHeader = "cleanedHeader";
        String uncleanedToken = "uncleanedToken";
        ColleagueSessionToken mockColleagueToken = Mockito.mock(ColleagueSessionToken.class);

        try (MockedStatic<StartAnywhereSecurityUtil> securityUtilMock = mockStatic(StartAnywhereSecurityUtil.class);
             MockedStatic<ColleagueSessionToken> tokenStatic = mockStatic(ColleagueSessionToken.class);
             MockedStatic<InfoTypeLogEventHelper> logMock = mockStatic(InfoTypeLogEventHelper.class)) {

            securityUtilMock.when(() -> StartAnywhereSecurityUtil.cleanIt(originalToken)).thenReturn(cleanedToken);
            securityUtilMock.when(() -> StartAnywhereSecurityUtil.cleanIt(originalHeader)).thenReturn(cleanedHeader);
            securityUtilMock.when(() -> StartAnywhereSecurityUtil.unCleanIt(cleanedToken)).thenReturn(uncleanedToken);

            tokenStatic.when(() -> ColleagueSessionToken.parse(uncleanedToken)).thenReturn(mockColleagueToken);
            Mockito.when(mockColleagueToken.getLdapIdFromColleagueSessionToken()).thenReturn("ldapId");

            ResponseEntity<Object> expectedResponse = ResponseEntity.ok("Created");
            Mockito.when(clientServiceMock.addNewclientdetails(uncleanedToken, cleanedHeader, "ldapId", request))
                    .thenReturn(expectedResponse);

            ResponseEntity<Object> response = controllerMock.addNewclientdetails(originalToken, originalHeader, request);

            assertEquals(HttpStatus.OK, response.getStatusCode());
            assertEquals("Created", response.getBody());
        }
    }

    // --- Missing test for addNewclientdetails: JsonException branch ---
    @Test
    public void testAddNewclientdetails_JsonException() throws Exception {
        String token = "badToken";
        String header = "header";
        ClientModel request = new ClientModel();
        request.setClientId("00095");

        try (MockedStatic<StartAnywhereSecurityUtil> securityUtilMock = mockStatic(StartAnywhereSecurityUtil.class);
             MockedStatic<ColleagueSessionToken> tokenStatic = mockStatic(ColleagueSessionToken.class)) {

            securityUtilMock.when(() -> StartAnywhereSecurityUtil.cleanIt(token)).thenReturn(token);
            securityUtilMock.when(() -> StartAnywhereSecurityUtil.cleanIt(header)).thenReturn(header);
            securityUtilMock.when(() -> StartAnywhereSecurityUtil.unCleanIt(token)).thenReturn(token);

            tokenStatic.when(() -> ColleagueSessionToken.parse(token)).thenThrow(new jakarta.json.JsonException("bad"));

            ResponseEntity<Object> response = controllerMock.addNewclientdetails(token, header, request);

            assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
            assertTrue(response.getBody() instanceof com.alight.cc.startanywhere.model.BaseResponse);
        }
    }
