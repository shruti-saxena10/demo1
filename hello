@Test
void testGetClientConfigurationDetails_BadRequestValidation() {
    // Arrange
    String token = "mockToken";
    String header = "mockHeader";
    ClientRequest clientRequest = new ClientRequest();

    // Create a mock validationResponse with BAD_REQUEST code
    ClientConfigurationResponse validationResponse = new ClientConfigurationResponse();
    validationResponse.setResponseCode(StartAnyWhereConstants.HTTP_STATUS_BAD_REQUEST);

    // Mock service to return validationResponse
    Mockito.when(fetchClientConfigurationService.validateClientRequest(Mockito.eq(header), Mockito.eq(clientRequest)))
           .thenReturn(validationResponse);

    // Act
    ResponseEntity<ClientConfigurationResponse> response =
            startAnywhereController.getClientConfigurationDetails(token, header, clientRequest);

    // Assert
    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    assertEquals(validationResponse, response.getBody());

    // Verify that validateClientRequest was called once
    Mockito.verify(fetchClientConfigurationService, Mockito.times(1))
           .validateClientRequest(header, clientRequest);

    // Verify getClientConfigurationDetails() should NOT be called since validation failed
    Mockito.verify(fetchClientConfigurationService, Mockito.never())
           .getClientConfigurationDetails(Mockito.any(), Mockito.any(), Mockito.any());
}
