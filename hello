 @Test
    void checkStatus_correlationIdIsZero_returnsBadRequest() throws Exception {
        String header = "{\"correlationId\":\"0\",\"consumerReferenceId\":\"localtest\",\"locale\":\"en_US\",\"clientId\":\"999997\"}";
        ClientConfigurationRequest req = mock(ClientConfigurationRequest.class);
        ResponseEntity<Object> resp = service.checkStatus(header, req);
        assertNotNull(resp);
        assertEquals(HttpStatus.BAD_REQUEST, resp.getStatusCode());
    }

    @Test
    void checkStatus_trackEntityOutputBlank_returnsSuccessWithDefaultResponse() throws Exception {
        String header = "{\"correlationId\":\"9000006\",\"consumerReferenceId\":\"localtest\",\"locale\":\"en_US\",\"clientId\":\"999997\"}";
        ClientConfigurationRequest req = mock(ClientConfigurationRequest.class);
        when(req.getClientId()).thenReturn("cid");
        ClientOnboardingRequestTrackEntity entity = new ClientOnboardingRequestTrackEntity();
        entity.setStatus(1);
        entity.setClientId("cid");
        entity.setCorrelationId("corrId");
        entity.setOutput(" "); // output blank
        when(trackRepo.findByCorrelationIdAndClientId("9000006", "cid")).thenReturn(entity);
        ResponseEntity<Object> resp = service.checkStatus(header, req);
        assertEquals(HttpStatus.OK, resp.getStatusCode());
    }

    @Test
    void checkStatus_outputWithInvalidResponseCode_defaultsToOK() throws Exception {
        String header = "{\"correlationId\":\"9000006\",\"consumerReferenceId\":\"localtest\",\"locale\":\"en_US\",\"clientId\":\"999997\"}";
        ClientConfigurationRequest req = mock(ClientConfigurationRequest.class);
        when(req.getClientId()).thenReturn("cid");
        ClientOnboardingRequestTrackEntity entity = new ClientOnboardingRequestTrackEntity();
        entity.setStatus(1);
        entity.setClientId("cid");
        entity.setCorrelationId("corrId");
        entity.setOutput("{\"responseCode\":\"999999\",\"responseMessage\":\"Invalid code\"}");
        when(trackRepo.findByCorrelationIdAndClientId("9000006", "cid")).thenReturn(entity);
        ResponseEntity<Object> resp = service.checkStatus(header, req);
        assertEquals(HttpStatus.OK, resp.getStatusCode());
    }

    @Test
    void getResponseEntity_responseMessageNull_setsEmptyDescription() {
        ClientConfigurationResponse resp = new ClientConfigurationResponse();
        ResponseEntity<Object> entity = service.getResponseEntity(resp, null, HttpStatus.OK, null, null);
        assertEquals(HttpStatus.OK, entity.getStatusCode());
    }

    @Test
    void getResponseEntity_responseStatusNotOK_setsResponseCodeMinus999() {
        ClientConfigurationResponse resp = new ClientConfigurationResponse();
        ResponseEntity<Object> entity = service.getResponseEntity(resp, "error", HttpStatus.BAD_REQUEST, null, null);
        assertEquals(HttpStatus.BAD_REQUEST, entity.getStatusCode());
    }

    @Test
    void updateTrack_entityNotFound_doesNothing() throws Exception {
        String header = "{\"correlationId\":\"9000006\",\"consumerReferenceId\":\"localtest\",\"locale\":\"en_US\",\"clientId\":\"999997\"}";
        ClientConfigurationRequest req = new ClientConfigurationRequest();
        req.setClientId("cid");
        when(trackRepo.findByCorrelationIdAndClientId("9000006", "cid")).thenReturn(null);
        List<ClientConfigError> errors = new ArrayList<>();
        BaseResponse response = new BaseResponse("200", "Client Configured Successfully", errors);
        // Should not throw exception
        assertDoesNotThrow(() -> service.updateTrack(header, req, errors, response));
        // Should not save anything
        verify(trackRepo, never()).save(any());
    }

    @Test
    void saveTrack_serializesInputJsonCorrectly() throws Exception {
        String header = "{\"correlationId\":\"9000006\",\"consumerReferenceId\":\"localtest\",\"locale\":\"en_US\",\"clientId\":\"999997\"}";
        ClientConfigurationRequest req = new ClientConfigurationRequest();
        req.setClientId("cid");
        service.saveTrack(header, req);
        verify(trackRepo).save(argThat(e ->
            e.getInputJson() != null && e.getInputJson().contains("\"clientId\":\"cid\"")
        ));
    }
