@Test
void handleJsonParseError_withJsonMappingException_branch() throws Exception {
    // 1️⃣ Mock the JsonMappingException.Reference to simulate a field error
    JsonMappingException.Reference ref = mock(JsonMappingException.Reference.class);
    when(ref.getFieldName()).thenReturn("username");

    // 2️⃣ Mock JsonMappingException and make getPath() return the mocked reference
    JsonMappingException jme = mock(JsonMappingException.class);
    when(jme.getPath()).thenReturn(Collections.singletonList(ref));

    // 3️⃣ Wrap it in HttpMessageNotReadableException
    HttpMessageNotReadableException ex = new HttpMessageNotReadableException("JSON parse error", jme);

    // 4️⃣ Call the handler
    ResponseEntity<?> response = handler.handleJsonParseError(ex);

    // 5️⃣ Verify HTTP status
    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

    // 6️⃣ Verify BaseResponse contents
    BaseResponse body = (BaseResponse) response.getBody();
    assertNotNull(body);
    assertEquals(StartAnyWhereConstants.HTTP_STATUS_BAD_REQUEST, body.getResponseCode());
    assertEquals(StartAnyWhereConstants.BAD_REQUEST, body.getResponseMessage());

    // ✅ 7️⃣ Verify the formatted field-level message
    assertEquals(
        "Invalid value for field 'username'. Please provide a valid value.",
        body.getResponseDescription()
    );
}
