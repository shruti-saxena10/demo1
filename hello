@Test
    void testGetDisplayNamesWithClientId_Empty() {
        List<String> result = service.getDisplayNamesWithClientId(Collections.emptyList(), "id", "name");
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetDisplayNamesWithClientId_NullDisplayName() {
        SecurityManagerEntitlementEntity entity = new SecurityManagerEntitlementEntity();
        entity.setDisplayName(null);
        List<String> result = service.getDisplayNamesWithClientId(List.of(entity), "id", "name");
        assertTrue(result.isEmpty());
    }

    @Test
    void testTransformEntityFields_NullEntities() {
        Map<SecurityManagerEntitlementEntity, Map<String, String>> result =
            AsyncGroupServiceImpl.transformEntityFields(null, "id", "name");
        assertTrue(result.isEmpty());
    }

    @Test
    void testTransformEntityFields_NullEntityInList() {
        List<SecurityManagerEntitlementEntity> entities = Arrays.asList(null, new SecurityManagerEntitlementEntity());
        Map<SecurityManagerEntitlementEntity, Map<String, String>> result =
            AsyncGroupServiceImpl.transformEntityFields(entities, "id", "name");
        // Should skip null entity and process the other.
        assertEquals(1, result.size());
    }

    @Test
    void testGetPresentValues_EmptyJSONObject() {
        JSONObject json = new JSONObject();
        Map<String, String> result = service.getPresentValues(json);
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetPresentValues_MissingKeys() {
        JSONObject json = new JSONObject();
        json.put("foo", "bar");
        Map<String, String> result = service.getPresentValues(json);
        assertTrue(result.isEmpty());
    }

    @Test
    void testCheckValidationBeforeAsyncC_EmptyCorrelationId() {
        AsyncGroupServiceImpl service = spy(new AsyncGroupServiceImpl());
        String requestHeader = "{}";
        CreateGroupsResponse response = service.checkValidationBeforeAsyncC("token", requestHeader, "client", "cname");
        // Should return a response (not null), status should be BAD_REQUEST or missing parameters
        assertNotNull(response);
    }

    @Test
    void testCheckValidationBeforeAsyncC_TrackEntityNull() {
        AsyncGroupServiceImpl service = spy(new AsyncGroupServiceImpl());
        doReturn(null).when(service).trackRepo;
        String requestHeader = "{}";
        CreateGroupsResponse response = service.checkValidationBeforeAsyncC("token", requestHeader, "client", "cname");
        assertNotNull(response);
    }

    @Test
    void testCheckValidationBeforeAsyncC_TrackEntityStatusNotZero() {
        AsyncGroupServiceImpl service = spy(new AsyncGroupServiceImpl());
        SecurityManagerEntitlementEntity entity = new SecurityManagerEntitlementEntity();
        CreateGroupsResponse response = new CreateGroupsResponse();
        com.alight.cc.startanywhere.entity.ClientOnboardingRequestTrackEntity trackEntity =
            new com.alight.cc.startanywhere.entity.ClientOnboardingRequestTrackEntity();
        trackEntity.setStatus(1);
        doReturn(trackEntity).when(service.trackRepo).findByCorrelationIdAndClientId(anyString(), anyString());
        String requestHeader = "{}";
        CreateGroupsResponse result = service.checkValidationBeforeAsyncC("token", requestHeader, "client", "cname");
        assertNotNull(result);
    }

    @Test
    void testCheckValidationBeforeAsyncC_TrackEntityHitCountExceeded() {
        AsyncGroupServiceImpl service = spy(new AsyncGroupServiceImpl());
        CreateGroupsResponse response = new CreateGroupsResponse();
        com.alight.cc.startanywhere.entity.ClientOnboardingRequestTrackEntity trackEntity =
            new com.alight.cc.startanywhere.entity.ClientOnboardingRequestTrackEntity();
        trackEntity.setStatus(0);
        trackEntity.setHitCount(5);
        doReturn(trackEntity).when(service.trackRepo).findByCorrelationIdAndClientId(anyString(), anyString());
        doReturn(3).when(service.configBean).getHitCount();
        String requestHeader = "{}";
        CreateGroupsResponse result = service.checkValidationBeforeAsyncC("token", requestHeader, "client", "cname");
        assertNotNull(result);
    }
