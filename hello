@Test
void testCreateGroupsAsync_ParseExceptionBranch() throws Exception {
    List<SecurityManagerEntitlementEntity> entities = List.of(entity);
    when(entitlementRepo.findAll()).thenReturn(entities);
    when(userService.getFreshAccessToken()).thenReturn("access123");

    // Mock FeignException.Unauthorized with valid JSON (to enter that branch)
    FeignException.Unauthorized unauthorized = mock(FeignException.Unauthorized.class);
    when(unauthorized.contentUTF8()).thenReturn("invalid-json"); // invalid JSON to trigger ParseException

    when(saviyntClient.updateEntitlementsOnUser(any(), any())).thenThrow(unauthorized);

    // Mock parser to throw ParseException
    when(parser.parse(anyString())).thenThrow(new ParseException(ParseException.ERROR_UNEXPECTED_TOKEN));

    try (MockedStatic<StartAnywhereSecurityUtil> secUtil = mockStatic(StartAnywhereSecurityUtil.class)) {
        secUtil.when(() -> StartAnywhereSecurityUtil.unCleanIt(any())).thenReturn("{}");
        try (MockedStatic<RequestHeader> reqHeader = mockStatic(RequestHeader.class)) {
            RequestHeader header = new RequestHeader();
            header.setCorrelationId("corr123");
            reqHeader.when(() -> RequestHeader.parse(any())).thenReturn(header);
            when(trackRepo.findByCorrelationIdAndClientId(any(), any())).thenReturn(null);

            assertDoesNotThrow(() ->
                service.createGroupsAsync("session", "{}", "client123", "ClientX")
            );
        }
    }
}
