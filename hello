@Test
void testCreateGroupsAsync_FailedEntitlementBranch() throws Exception {
    // Prepare entities
    List<SecurityManagerEntitlementEntity> entities = List.of(entity);
    when(entitlementRepo.findAll()).thenReturn(entities);
    when(userService.getFreshAccessToken()).thenReturn("access123");

    // Mock FeignException with valid JSON to trigger the branch
    FeignException feignEx = mock(FeignException.class);
    when(feignEx.contentUTF8()).thenReturn("{\"msg\":\"Some error occurred\",\"errorCode\":\"500\"}");
    when(saviyntClient.updateEntitlementsOnUser(anyString(), any())).thenThrow(feignEx);

    // Mock static methods
    try (MockedStatic<StartAnywhereSecurityUtil> secUtil = mockStatic(StartAnywhereSecurityUtil.class)) {
        secUtil.when(() -> StartAnywhereSecurityUtil.unCleanIt(any())).thenReturn("{}");

        try (MockedStatic<RequestHeader> reqHeader = mockStatic(RequestHeader.class)) {
            RequestHeader header = new RequestHeader();
            header.setCorrelationId("corr123");
            reqHeader.when(() -> RequestHeader.parse(any())).thenReturn(header);

            // Mock repository
            when(trackRepo.findByCorrelationIdAndClientId(any(), any())).thenReturn(null);

            // Call the async method (it will run synchronously in test)
            service.createGroupsAsync("session", "{}", "client123", "ClientX");

            // Verify that SaviyntClient was called
            verify(saviyntClient).updateEntitlementsOnUser(anyString(), any());

            // Optional: Verify that trackRepo.save was called for creating/updating tracking
            verify(trackRepo).save(any(ClientOnboardingRequestTrackEntity.class));
        }
    }
}
