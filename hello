@Test
    void testNullOrgNameTriggersUnCleanItAndProceeds() throws Exception {
        when(checkClientData.isCheckRequestHeader(header)).thenReturn(null);
        when(userService.getAccessToken()).thenReturn(token);
        when(checkClientData.isNotValidClient(clientId, null)).thenReturn(null);

        User user = new User();
        user.setUsername("user1");
        user.setEmail("user@example.com");
        when(userService.getUserProfile("user@example.com", token)).thenReturn(user);

        AccountDTO account = new AccountDTO();
        account.setStatus("1");
        account.setAccountname("acc123");
        when(accountService.getAccounts("user1", token)).thenReturn(List.of(account));

        OrganizationDetailsDTO orgDetail = new OrganizationDetailsDTO();
        orgDetail.setOrganizationname(clientId);
        UserOrganizationDetailResponseDTO orgResp = new UserOrganizationDetailResponseDTO();
        orgResp.setUsername("user1");
        orgResp.setOrganizations(List.of(orgDetail));
        when(orgService.getUserDetailsForOrganization(Mockito.eq(token), Mockito.any())).thenReturn(orgResp);

        EntitlementsResponse entResp = new EntitlementsResponse();
        EntitlementDetail detail = new EntitlementDetail();
        detail.setEntitlement_value("ent1");
        detail.setEndpoint("endpoint");
        detail.setDescription("desc");
        detail.setStatus("active");
        entResp.setEntitlementdetails(List.of(detail));
        lenient().when(entitlementService.loadEntitlements("user1", token, clientId)).thenReturn(entResp);

        lenient().when(securityManagerEntitlementRepository.findByIsSecuritymanager(1)).thenReturn(List.of());
        lenient().when(saviyntService.getDisplayNamesWithClientId(Mockito.any(), Mockito.eq(clientId))).thenReturn(List.of("ent1"));

        UserEntitlementsDTO updated = new UserEntitlementsDTO();
        updated.setEmail("user@example.com");
        lenient().when(entitlementService.updateUser(Mockito.any(), Mockito.eq(token))).thenReturn(updated);

        List<UserOrganizationDetailsDTO> listDto= new ArrayList<>();
        UserOrganizationDetailsDTO dto=new UserOrganizationDetailsDTO();
        dto.setUsername("user1");
        listDto.add(dto);
        OrganizationUserDetailResponseDTO orguserRespose = new OrganizationUserDetailResponseDTO();
        orguserRespose.setOrganizationname(clientId);
        orguserRespose.setUsers(listDto);
        lenient().when(orgService.getUserOrganizationDetails(Mockito.eq(token), Mockito.any(), Mockito.eq(clientId))).thenReturn(orguserRespose);

        UpdateOrganizationResponse updateOrgResp = new UpdateOrganizationResponse();
        updateOrgResp.setStatusCode(200);
        lenient(). when(orgService.updateUserToOrganization(Mockito.any(), Mockito.eq(token))).thenReturn(updateOrgResp);

        BaseResponse pgResponseBody = new BaseResponse();
        lenient(). when(removeClientService.deleteClientDetails(Mockito.any(), Mockito.any(), Mockito.eq(clientId)))
        .thenReturn(ResponseEntity.ok(pgResponseBody));

        // Act
        ResponseEntity<Object> response = service.getDeleteClientConfigurationDetails(
                "sessionToken", header, clientId, null, emails);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    void testMultipleEmailsWithSomeInvalidAndSomeValid() throws Exception {
        when(checkClientData.isCheckRequestHeader(header)).thenReturn(null);
        when(userService.getAccessToken()).thenReturn(token);
        when(checkClientData.isNotValidClient(clientId, orgName)).thenReturn(null);

        // One valid, one invalid email
        User user = new User();
        user.setUsername("user1");
        user.setEmail("valid@example.com");
        when(userService.getUserProfile("valid@example.com", token)).thenReturn(user);
        when(userService.getUserProfile("invalid@example.com", token)).thenReturn(null);

        AccountDTO account = new AccountDTO();
        account.setStatus("1");
        account.setAccountname("acc123");
        when(accountService.getAccounts("user1", token)).thenReturn(List.of(account));

        OrganizationDetailsDTO orgDetail = new OrganizationDetailsDTO();
        orgDetail.setOrganizationname(clientId);
        UserOrganizationDetailResponseDTO orgResp = new UserOrganizationDetailResponseDTO();
        orgResp.setUsername("user1");
        orgResp.setOrganizations(List.of(orgDetail));
        when(orgService.getUserDetailsForOrganization(Mockito.eq(token), Mockito.any())).thenReturn(orgResp);

        EntitlementsResponse entResp = new EntitlementsResponse();
        EntitlementDetail detail = new EntitlementDetail();
        detail.setEntitlement_value("ent1");
        detail.setEndpoint("endpoint");
        detail.setDescription("desc");
        detail.setStatus("active");
        entResp.setEntitlementdetails(List.of(detail));
        lenient().when(entitlementService.loadEntitlements("user1", token, clientId)).thenReturn(entResp);

        lenient().when(securityManagerEntitlementRepository.findByIsSecuritymanager(1)).thenReturn(List.of());
        lenient().when(saviyntService.getDisplayNamesWithClientId(Mockito.any(), Mockito.eq(clientId))).thenReturn(List.of("ent1"));

        UserEntitlementsDTO updated = new UserEntitlementsDTO();
        updated.setEmail("valid@example.com");
        lenient().when(entitlementService.updateUser(Mockito.any(), Mockito.eq(token))).thenReturn(updated);

        List<UserOrganizationDetailsDTO> listDto= new ArrayList<>();
        UserOrganizationDetailsDTO dto=new UserOrganizationDetailsDTO();
        dto.setUsername("user1");
        listDto.add(dto);
        OrganizationUserDetailResponseDTO orguserRespose = new OrganizationUserDetailResponseDTO();
        orguserRespose.setOrganizationname(clientId);
        orguserRespose.setUsers(listDto);
        lenient().when(orgService.getUserOrganizationDetails(Mockito.eq(token), Mockito.any(), Mockito.eq(clientId))).thenReturn(orguserRespose);

        UpdateOrganizationResponse updateOrgResp = new UpdateOrganizationResponse();
        updateOrgResp.setStatusCode(200);
        lenient(). when(orgService.updateUserToOrganization(Mockito.any(), Mockito.eq(token))).thenReturn(updateOrgResp);

        BaseResponse pgResponseBody = new BaseResponse();
        lenient(). when(removeClientService.deleteClientDetails(Mockito.any(), Mockito.any(), Mockito.eq(clientId)))
        .thenReturn(ResponseEntity.ok(pgResponseBody));

        List<String> mixedEmails = List.of("valid@example.com", "invalid@example.com");
        // Act
        ResponseEntity<Object> response = service.getDeleteClientConfigurationDetails(
                "sessionToken", header, clientId, orgName, mixedEmails);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    void testGetDeleteClientConfigurationDetails_ExceptionThrown() throws Exception {
        when(checkClientData.isCheckRequestHeader(header)).thenReturn(null);
        when(userService.getAccessToken()).thenReturn(token);
        when(checkClientData.isNotValidClient(clientId, orgName)).thenReturn(null);

        // Force exception in accountService
        User user = new User();
        user.setUsername("user1");
        user.setEmail("user@example.com");
        when(userService.getUserProfile("user@example.com", token)).thenReturn(user);
        when(accountService.getAccounts("user1", token)).thenThrow(new RuntimeException("Simulated Exception"));

        // Act
        ResponseEntity<Object> response = service.getDeleteClientConfigurationDetails(
                "sessionToken", header, clientId, orgName, emails);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody().toString().contains("RuntimeException"));
    }

    @Test
    void testHandleRetryFailureWithNullException() {
        ResponseEntity<Object> result = service.handleRetryFailure(null, token, header, clientId, orgName, emails);
        assertEquals(HttpStatus.SERVICE_UNAVAILABLE, result.getStatusCode());
    }

    @Test
    void testRemoveClientServiceReturnsNullResponse() throws Exception {
        when(checkClientData.isCheckRequestHeader(header)).thenReturn(null);
        when(userService.getAccessToken()).thenReturn(token);
        when(checkClientData.isNotValidClient(clientId, orgName)).thenReturn(null);

        User user = new User();
        user.setUsername("user1");
        user.setEmail("user@example.com");
        when(userService.getUserProfile("user@example.com", token)).thenReturn(user);

        AccountDTO account = new AccountDTO();
        account.setStatus("1");
        account.setAccountname("acc123");
        when(accountService.getAccounts("user1", token)).thenReturn(List.of(account));

        OrganizationDetailsDTO orgDetail = new OrganizationDetailsDTO();
        orgDetail.setOrganizationname(clientId);
        UserOrganizationDetailResponseDTO orgResp = new UserOrganizationDetailResponseDTO();
        orgResp.setUsername("user1");
        orgResp.setOrganizations(List.of(orgDetail));
        when(orgService.getUserDetailsForOrganization(Mockito.eq(token), Mockito.any())).thenReturn(orgResp);

        EntitlementsResponse entResp = new EntitlementsResponse();
        EntitlementDetail detail = new EntitlementDetail();
        detail.setEntitlement_value("ent1");
        entResp.setEntitlementdetails(List.of(detail));
        lenient().when(entitlementService.loadEntitlements("user1", token, clientId)).thenReturn(entResp);

        lenient().when(securityManagerEntitlementRepository.findByIsSecuritymanager(1)).thenReturn(List.of());
        lenient().when(saviyntService.getDisplayNamesWithClientId(Mockito.any(), Mockito.eq(clientId))).thenReturn(List.of("ent1"));

        UserEntitlementsDTO updated = new UserEntitlementsDTO();
        updated.setEmail("user@example.com");
        lenient().when(entitlementService.updateUser(Mockito.any(), Mockito.eq(token))).thenReturn(updated);

        List<UserOrganizationDetailsDTO> listDto= new ArrayList<>();
        UserOrganizationDetailsDTO dto=new UserOrganizationDetailsDTO();
        dto.setUsername("user1");
        listDto.add(dto);
        OrganizationUserDetailResponseDTO orguserRespose = new OrganizationUserDetailResponseDTO();
        orguserRespose.setOrganizationname(clientId);
        orguserRespose.setUsers(listDto);
        lenient().when(orgService.getUserOrganizationDetails(Mockito.eq(token), Mockito.any(), Mockito.eq(clientId))).thenReturn(orguserRespose);

        UpdateOrganizationResponse updateOrgResp = new UpdateOrganizationResponse();
        updateOrgResp.setStatusCode(200);
        lenient(). when(orgService.updateUserToOrganization(Mockito.any(), Mockito.eq(token))).thenReturn(updateOrgResp);

        when(removeClientService.deleteClientDetails(Mockito.any(), Mockito.any(), Mockito.eq(clientId)))
        .thenReturn(null);

        // Act
        ResponseEntity<Object> response = service.getDeleteClientConfigurationDetails(
                "sessionToken", header, clientId, orgName, emails);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
