
@Test
void handleJsonParseError_withFieldName_returnsCustomMessage() {
    // Mock JsonMappingException.Reference
    JsonMappingException.Reference ref = mock(JsonMappingException.Reference.class);
    when(ref.getFieldName()).thenReturn("age");

    // Mock JsonMappingException and make it return the reference
    JsonMappingException jme = mock(JsonMappingException.class);
    when(jme.getPath()).thenReturn(java.util.Collections.singletonList(ref));

    // Wrap inside HttpMessageNotReadableException
    HttpMessageNotReadableException ex = new HttpMessageNotReadableException("JSON parse error", jme);

    // Call handler
    ResponseEntity<?> response = handler.handleJsonParseError(ex);

    // Verify response
    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    BaseResponse body = (BaseResponse) response.getBody();
    assertEquals(StartAnyWhereConstants.HTTP_STATUS_BAD_REQUEST, body.getResponseCode());
    assertEquals(StartAnyWhereConstants.BAD_REQUEST, body.getResponseMessage());
    assertEquals("Invalid value for field 'age'. Please provide a valid value.", body.getResponseDescription());
}
