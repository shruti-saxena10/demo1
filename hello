import static org.mockito.Mockito.*;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;

class ClientOnboardingServiceTest {

    @Test
    void testDeleteClientConfiguration_noOrganizationsFound() {
        // Mock user + response
        User user = mock(User.class);
        when(user.getEmail()).thenReturn("test@alight.com");
        ResponseEntity<Object> response = mock(ResponseEntity.class);
        HashMap<String, String> errors = new HashMap<>();

        // Mock static ErrorLogEventHelper
        try (MockedStatic<ErrorLogEventHelper> mockedErrorLog = mockStatic(ErrorLogEventHelper.class);
             MockedStatic<StartAnywhereUtil> mockedStartAnywhereUtil = mockStatic(StartAnywhereUtil.class)) {

            // Stub buildResponse to return a mock response
            mockedStartAnywhereUtil.when(() -> StartAnywhereUtil.buildResponse(
                    eq(response),
                    eq(StartAnyWhereConstants.HTTP_STATUS_SUCCESS),
                    eq(StartAnyWhereConstants.DELETE_STATUS),
                    eq(StartAnyWhereConstants.SAV018),
                    eq(StartAnyWhereConstants.SAV018_MSG),
                    eq(StartAnyWhereConstants.LOW),
                    eq("test@alight.com"),
                    eq(errors)
            )).thenReturn(response);

            // ---- Call method under test ----
            // Suppose you have your service instance:
            ClientOnboardingService service = new ClientOnboardingService();
            // Trigger the part of code that calls the static methods
            ResponseEntity<Object> actualResponse =
                    service.getDeleteClientConfigurationDetails(/* supply params */);

            // ---- Verify static calls ----
            mockedErrorLog.verify(() -> ErrorLogEventHelper.logErrorEvent(
                    eq(ClientOnboardingService.class.getName()),
                    eq("No organizations found for user"),
                    eq(""),
                    isNull(),
                    eq(ErrorLogEvent.ERROR_SEVERITY)
            ));

            mockedStartAnywhereUtil.verify(() -> StartAnywhereUtil.buildResponse(
                    eq(response),
                    eq(StartAnyWhereConstants.HTTP_STATUS_SUCCESS),
                    eq(StartAnyWhereConstants.DELETE_STATUS),
                    eq(StartAnyWhereConstants.SAV018),
                    eq(StartAnyWhereConstants.SAV018_MSG),
                    eq(StartAnyWhereConstants.LOW),
                    eq("test@alight.com"),
                    eq(errors)
            ));

            // Assert response if needed
            assertEquals(response, actualResponse);
        }
    }
}
