 @Test
    void testGetClientConfigurationDetails_IOExceptionThrown() throws Exception {
        ClientRequest request = new ClientRequest();
        request.setClientId("IOEX");
        request.setSecurityManagers(new ArrayList<>(List.of(new SecurityManagerRequest("x@example.com"))));

        when(clientDataService.getClientData(any(), any(), eq("IOEX"))).thenThrow(new IOException("IO Error"));
        ClientConfigurationResponse response = service.getClientConfigurationDetails("tok", "hdr", request);
        assertEquals("500", response.getResponseCode());
    }

    @Test
    void testGetClientConfigurationDetails_RuntimeExceptionThrown() throws Exception {
        ClientRequest request = new ClientRequest();
        request.setClientId("RTEX");
        request.setSecurityManagers(new ArrayList<>(List.of(new SecurityManagerRequest("x@example.com"))));

        when(clientDataService.getClientData(any(), any(), eq("RTEX"))).thenThrow(new RuntimeException("RT Error"));
        ClientConfigurationResponse response = service.getClientConfigurationDetails("tok", "hdr", request);
        assertEquals("500", response.getResponseCode());
    }

    @Test
    void testGetClientConfigurationDetails_DuplicateEmailsOnlyOneProcessed() throws Exception {
        ClientRequest request = new ClientRequest();
        request.setClientId("DUPLICATE");
        SecurityManagerRequest sm1 = new SecurityManagerRequest("duplicate@example.com");
        SecurityManagerRequest sm2 = new SecurityManagerRequest("DUPLICATE@EXAMPLE.COM"); // same, different case
        request.setSecurityManagers(new ArrayList<>(List.of(sm1, sm2)));

        ClientResponse clientData = new ClientResponse();
        when(clientDataService.getClientData(any(), any(), eq("DUPLICATE"))).thenReturn(clientData);
        when(userService.getAccessToken()).thenReturn("token");

        User user = new User();
        user.setEmail("duplicate@example.com");
        user.setUsername("dupUser");
        UserDetailsResponse userDetails = new UserDetailsResponse();
        userDetails.setUserdetails(List.of(user));
        when(requestBuilder.buildGetUserQuery(anyString())).thenReturn("query");
        when(saviyntClient.getUser(any(), any())).thenReturn(userDetails);

        OrganizationDetailsDTO org = new OrganizationDetailsDTO();
        org.setOrganizationname("DUPLICATE");
        UserOrganizationDetailResponseDTO orgResp = new UserOrganizationDetailResponseDTO();
        orgResp.setOrganizations(List.of(org));
        when(saviyntClient.getOrganizationUserDetails(any(), any())).thenReturn(orgResp);

        SecurityManagerEntitlementEntity ent = new SecurityManagerEntitlementEntity();
        ent.setDisplayName("Role-<ClientID>");
        when(entitlementRepo.findByIsSecuritymanager(1)).thenReturn(List.of(ent));

        EntitlementDetail detail = new EntitlementDetail();
        detail.setEntitlement_value("PFX_Role-DUPLICATE,APP");
        detail.setEntitlementOwner(List.of("dupUser"));
        detail.setStatus("Active");
        detail.setEndpoint("endpoint");
        detail.setDescription("desc");
        EntitlementsResponse entResp = new EntitlementsResponse();
        entResp.setStatusCode(200);
        entResp.setEntitlementdetails(List.of(detail));
        when(saviyntClient.getEntitlements(any(), any())).thenReturn(entResp);

        ClientConfigurationResponse response = service.getClientConfigurationDetails("token", "header", request);
        assertEquals(1, response.getSecurityManagers().size()); // Only one processed
    }

    @Test
    void testDetermineUserTypeByEmailDomain_internal() throws Exception {
        DomainLookup domain = new DomainLookup();
        domain.setDomainName("internal.com");
        when(domainRepo.findByDomainType(any())).thenReturn(List.of(domain));

        Method method = FetchClientConfigurationServiceImpl.class.getDeclaredMethod(
            "determineUserTypeByEmailDomain", String.class);
        method.setAccessible(true);

        String type = (String) method.invoke(service, "user@internal.com");
        assertEquals("internal", type);
    }

    @Test
    void testDetermineUserTypeByEmailDomain_external() throws Exception {
        DomainLookup domain = new DomainLookup();
        domain.setDomainName("internal.com");
        when(domainRepo.findByDomainType(any())).thenReturn(List.of(domain));

        Method method = FetchClientConfigurationServiceImpl.class.getDeclaredMethod(
            "determineUserTypeByEmailDomain", String.class);
        method.setAccessible(true);

        String type = (String) method.invoke(service, "user@external.com");
        assertEquals("external", type);
    }

    @Test
    void testIsNullOrEmpty_variousStrings() throws Exception {
        Method method = FetchClientConfigurationServiceImpl.class.getDeclaredMethod(
            "isNullOrEmpty", String.class);
        method.setAccessible(true);

        assertTrue((Boolean) method.invoke(service, (String) null));
        assertTrue((Boolean) method.invoke(service, ""));
        assertTrue((Boolean) method.invoke(service, "   "));
        assertFalse((Boolean) method.invoke(service, "abc"));
    }

    @Test
    void testHandleRetryFailure_otherExceptionType() {
        Exception ex = new Exception("Other");
        ClientRequest request = new ClientRequest();
        ClientConfigurationResponse result = service.handleRetryFailure(ex, "token", "header", request);
        assertEquals("503", result.getResponseCode());
    }

    @Test
    void testGetDisplayNamesWithClientId_nullDisplayNameFilteredOut() {
        SecurityManagerEntitlementEntity entity = new SecurityManagerEntitlementEntity();
        entity.setDisplayName(null);
        List<String> result = service.getDisplayNamesWithClientId(List.of(entity), "999");
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetClientConfigurationDetails_NullSecurityManagersList() throws Exception {
        ClientRequest request = new ClientRequest();
        request.setClientId("NULL_SM");
        request.setSecurityManagers(null);

        when(clientDataService.getClientData(any(), any(), eq("NULL_SM"))).thenReturn(new ClientResponse());
        ClientConfigurationResponse response = service.getClientConfigurationDetails("tok", "hdr", request);
        assertEquals("200", response.getResponseCode());
    }

    @Test
    void testGetClientConfigurationDetails_EntitlementOwnerIsNullOrBlank() throws Exception {
        ClientRequest request = new ClientRequest();
        request.setClientId("ENTOWNER");
        request.setSecurityManagers(new ArrayList<>(List.of(new SecurityManagerRequest("owner@example.com"))));

        ClientResponse clientData = new ClientResponse();
        when(clientDataService.getClientData(any(), any(), eq("ENTOWNER"))).thenReturn(clientData);
        when(userService.getAccessToken()).thenReturn("token");

        User user = new User();
        user.setEmail("owner@example.com");
        user.setUsername("ownerUser");
        UserDetailsResponse userDetails = new UserDetailsResponse();
        userDetails.setUserdetails(List.of(user));
        when(requestBuilder.buildGetUserQuery(anyString())).thenReturn("query");
        when(saviyntClient.getUser(any(), any())).thenReturn(userDetails);

        OrganizationDetailsDTO org = new OrganizationDetailsDTO();
        org.setOrganizationname("ENTOWNER");
        UserOrganizationDetailResponseDTO orgResp = new UserOrganizationDetailResponseDTO();
        orgResp.setOrganizations(List.of(org));
        when(saviyntClient.getOrganizationUserDetails(any(), any())).thenReturn(orgResp);

        SecurityManagerEntitlementEntity ent = new SecurityManagerEntitlementEntity();
        ent.setDisplayName("Role-<ClientID>");
        when(entitlementRepo.findByIsSecuritymanager(1)).thenReturn(List.of(ent));

        EntitlementDetail detail = new EntitlementDetail();
        detail.setEntitlement_value("PFX_Role-ENTOWNER,APP");
        detail.setEntitlementOwner(List.of("", null, "ownerUser")); // one blank, one null, one valid
        detail.setStatus("Active");
        detail.setEndpoint("endpoint");
        detail.setDescription("desc");
        EntitlementsResponse entResp = new EntitlementsResponse();
        entResp.setStatusCode(200);
        entResp.setEntitlementdetails(List.of(detail));
        when(saviyntClient.getEntitlements(any(), any())).thenReturn(entResp);

        ClientConfigurationResponse response = service.getClientConfigurationDetails("token", "header", request);
        assertEquals("200", response.getResponseCode());
        assertEquals(1, response.getSecurityManagers().get(0).getEntitlements().get(0).getEntitlementOwner().size());
        assertEquals("ownerUser", response.getSecurityManagers().get(0).getEntitlements().get(0).getEntitlementOwner().get(0).getAID());
    }
