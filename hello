void testDeleteClientConfiguration_NoOrganizationsFound() {
        // Arrange: mock DB and repo calls
        when(checkClientData.isNotValidClient(anyString(), anyString())).thenReturn(false); // client exists
        when(securityManagerEntitlementRepository.findByClientId(anyString()))
                .thenReturn(Collections.emptyList()); // no entitlements

        // Mock a User
        User user = mock(User.class);
        when(user.getEmail()).thenReturn("test@alight.com");
        when(userRepository.findByAlightColleagueId(anyString())).thenReturn(user);

        BaseResponse mockResponse = mock(BaseResponse.class);

        try (MockedStatic<ErrorLogEventHelper> mockedErrorLog = mockStatic(ErrorLogEventHelper.class);
             MockedStatic<StartAnywhereUtil> mockedStartAnywhereUtil = mockStatic(StartAnywhereUtil.class)) {

            // Stub buildResponse
            mockedStartAnywhereUtil.when(() -> StartAnywhereUtil.buildResponse(
                    any(BaseResponse.class),
                    anyString(), anyString(), anyString(), anyString(),
                    anyString(), anyString(), anyList()
            )).thenReturn(mockResponse);

            // Act: call the service method
            ResponseEntity<Object> actualResponse = service.getDeleteClientConfigurationDetails(
                    "dummy-session-token",     // alightColleagueSessionToken
                    "dummy-request-header",    // alightRequestHeader
                    "client-123",              // clientId
                    "TestOrg",                 // orgName
                    List.of("security@alight.com") // securityManagerEmailId
            );

            // Assert: verify logErrorEvent was called
            mockedErrorLog.verify(() -> ErrorLogEventHelper.logErrorEvent(
                    eq(ClientOnboardingService.class.getName()),
                    eq("No organizations found for user"),
                    eq(""),
                    isNull(),
                    eq(ErrorLogEvent.ERROR_SEVERITY)
            ));

            // Assert: verify buildResponse was called
            mockedStartAnywhereUtil.verify(() -> StartAnywhereUtil.buildResponse(
                    any(BaseResponse.class),
                    eq(StartAnyWhereConstants.HTTP_STATUS_SUCCESS),
                    eq(StartAnyWhereConstants.DELETE_STATUS),
                    eq(StartAnyWhereConstants.SAV018),
                    eq(StartAnyWhereConstants.SAV018_MSG),
                    eq(StartAnyWhereConstants.LOW),
                    eq("test@alight.com"),
                    anyList()
            ));

            // Optional: assert service returned what we stubbed
            assertNotNull(actualResponse);
            assertEquals(mockResponse, actualResponse.getBody());
        }
    }
}
