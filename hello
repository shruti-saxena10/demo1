 @InjectMocks
    private SaviyntLogin saviyntLogin;

    @BeforeEach
    void setup() throws Exception {
        saviyntLogin = new SaviyntLogin();
        setField("profile", "prod"); // default non-localdev
    }

    void setField(String name, Object value) throws Exception {
        Field field = SaviyntLogin.class.getDeclaredField(name);
        field.setAccessible(true);
        field.set(saviyntLogin, value);
    }

    // âœ… 1. Secrets contain both username and password
    @Test
    void testLoadLoginData_success() {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.username", "user1 ");
        secrets.put("controlcenter.startanywhere.saviynt.password", "pass1 ");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data = saviyntLogin.loadLoginData();
            assertNotNull(data);
            assertEquals("user1", data.getUsername());
            assertEquals("pass1", data.getPassword());
        }
    }

    // âœ… 2. Secrets missing username, profile â‰  localdev â†’ logs error
    @Test
    void testLoadLoginData_missingUsername_logsError() {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.password", "pass1");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data); // username missing
        }
    }

    // âœ… 3. Secrets missing password, profile â‰  localdev â†’ logs error
    @Test
    void testLoadLoginData_missingPassword_logsError() {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.username", "user1");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data); // password missing
        }
    }

    // âœ… 4. Secrets missing both, profile = localdev â†’ no logging
    @Test
    void testLoadLoginData_localdev_skipsLogging() throws Exception {
        setField("profile", "localdev");

        Map<String, String> secrets = new HashMap<>(); // empty
        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data); // no secrets
        }
    }

    // âœ… 5. getLoginData() lazy loads once
    @Test
    void testGetLoginData_lazyLoad() {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.username", "lazyuser");
        secrets.put("controlcenter.startanywhere.saviynt.password", "lazypass");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data1 = saviyntLogin.getLoginData();
            LoginData data2 = saviyntLogin.getLoginData();

            assertSame(data1, data2); // cached
            assertEquals("lazyuser", data1.getUsername());
        }
    }

    // âœ… 6. @PostConstruct init() loads loginData
    @Test
    void testInit_postConstruct() {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.username", "inituser");
        secrets.put("controlcenter.startanywhere.saviynt.password", "initpass");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            saviyntLogin.init(); // simulate @PostConstruct
            LoginData data = saviyntLogin.getLoginData();

            assertEquals("inituser", data.getUsername());
            assertEquals("initpass", data.getPassword());
        }
    }

    @Test
    void testLoadLoginData_missingUsername_andLogs() throws Exception {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.password", "secret-password");

        AHBaseException exception = new AHBaseException(); // concrete instance

        try (
            MockedStatic<DockerSecretsUtil> dockerMock = mockStatic(DockerSecretsUtil.class);
            MockedStatic<ErrorLogEventHelper> logMock = mockStatic(ErrorLogEventHelper.class)
        ) {
            dockerMock.when(DockerSecretsUtil::load).thenReturn(secrets);

            // Stub log call so it's callable with expected args
            logMock.when(() -> ErrorLogEventHelper.logErrorEvent(
                SaviyntLogin.class.getName(),
                "controlcenter.startanywhere.saviynt.username is not configured in secret",
                "getSaviyntLogin",
                exception,
                ErrorLogEvent.ERROR_SEVERITY
            )).thenCallRealMethod();

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data);
        }
    }

    @Test
    void testLoadLoginData_missingPassword_andLogs() throws Exception {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.username", "secret-user");

        AHBaseException exception = new AHBaseException(); // concrete instance

        try (
            MockedStatic<DockerSecretsUtil> dockerMock = mockStatic(DockerSecretsUtil.class);
            MockedStatic<ErrorLogEventHelper> logMock = mockStatic(ErrorLogEventHelper.class)
        ) {
            dockerMock.when(DockerSecretsUtil::load).thenReturn(secrets);

            // Stub log call with concrete args
            logMock.when(() -> ErrorLogEventHelper.logErrorEvent(
                SaviyntLogin.class.getName(),
                "controlcenter.startanywhere.saviynt.password is not configured in secret",
                "getSaviyntLogin",
                exception,
                ErrorLogEvent.ERROR_SEVERITY
            )).thenCallRealMethod();

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data);
        }
    }

    // ðŸ†• 7. getFreshLoginData() always loads new LoginData (not cached)
    @Test
    void testGetFreshLoginData_alwaysLoadsNewInstance() {
        Map<String, String> secrets1 = new HashMap<>();
        secrets1.put("controlcenter.startanywhere.saviynt.username", "freshuser");
        secrets1.put("controlcenter.startanywhere.saviynt.password", "freshpass");

        Map<String, String> secrets2 = new HashMap<>();
        secrets2.put("controlcenter.startanywhere.saviynt.username", "freshuser2");
        secrets2.put("controlcenter.startanywhere.saviynt.password", "freshpass2");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            // First call returns secrets1, second call returns secrets2
            mocked.when(DockerSecretsUtil::load)
                    .thenReturn(secrets1)
                    .thenReturn(secrets2);

            LoginData data1 = saviyntLogin.getFreshLoginData();
            LoginData data2 = saviyntLogin.getFreshLoginData();

            assertNotNull(data1);
            assertNotNull(data2);
            assertNotSame(data1, data2);
            assertEquals("freshuser", data1.getUsername());
            assertEquals("freshpass", data1.getPassword());
            assertEquals("freshuser2", data2.getUsername());
            assertEquals("freshpass2", data2.getPassword());
        }
    }

    // ðŸ†• 8. loadLoginData() handles Exception thrown by DockerSecretsUtil.load()
    @Test
    void testLoadLoginData_handlesExceptionFromDockerSecretsUtil() {
        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenThrow(new RuntimeException("docker error"));

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data);
        }
    }

    // ðŸ†• 9. loadLoginData() returns null if secrets are empty (and not localdev)
    @Test
    void testLoadLoginData_emptySecrets_nonLocaldev() {
        Map<String, String> secrets = new HashMap<>(); // empty map

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data);
        }
    }

    // ðŸ†• 10. loadLoginData() trims whitespace for username and password
    @Test
    void testLoadLoginData_trimsWhitespace() {
        Map<String, String> secrets = new HashMap<>();
        secrets.put("controlcenter.startanywhere.saviynt.username", "  userWithSpaces  ");
        secrets.put("controlcenter.startanywhere.saviynt.password", "  passWithSpaces  ");

        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(secrets);

            LoginData data = saviyntLogin.loadLoginData();
            assertNotNull(data);
            assertEquals("userWithSpaces", data.getUsername());
            assertEquals("passWithSpaces", data.getPassword());
        }
    }

    // ðŸ†• 11. getLoginData() returns null if loadLoginData returns null
    @Test
    void testGetLoginData_returnsNullIfLoadLoginDataReturnsNull() {
        try (MockedStatic<DockerSecretsUtil> mocked = mockStatic(DockerSecretsUtil.class)) {
            mocked.when(DockerSecretsUtil::load).thenReturn(new HashMap<>()); // empty

            LoginData data = saviyntLogin.getLoginData();
            assertNull(data);
        }
    }

    // ðŸ†• 12. InfoTypeLogEventHelper.logInfoEvent is called in catch block
    @Test
    void testLoadLoginData_logsInfoOnException() {
        try (
            MockedStatic<DockerSecretsUtil> dockerMock = mockStatic(DockerSecretsUtil.class);
            MockedStatic<InfoTypeLogEventHelper> infoMock = mockStatic(InfoTypeLogEventHelper.class)
        ) {
            dockerMock.when(DockerSecretsUtil::load).thenThrow(new RuntimeException("docker error"));

            // Verify logInfoEvent is called in catch block
            infoMock.when(() -> InfoTypeLogEventHelper.logInfoEvent(
                SaviyntLogin.class.getName(),
                "docker secrets not recived:User name not found>>>>password not found>>>"
            )).thenCallRealMethod();

            LoginData data = saviyntLogin.loadLoginData();
            assertNull(data);
        }
    }
