@Test
void testConstructEntitlementRequest_NullParams() {
    UpdateUserEntitlementsRequest req = service.constructEntitlementRequest(null, null);
    assertNotNull(req);
    assertNull(req.getDisplayname());
    assertNull(req.getDescription());
}

@Test
void testGetDisplayNamesWithClientId_NullClientIdOrName() {
    entity.setDisplayName("Group-<ClientID>");
    List<String> result1 = service.getDisplayNamesWithClientId(List.of(entity), null, "ClientX");
    assertTrue(result1.get(0).contains("null"));
    List<String> result2 = service.getDisplayNamesWithClientId(List.of(entity), "123", null);
    assertTrue(result2.get(0).contains("123"));
}

@Test
void testGetDisplayNamesWithClientId_DisplayNameNoPlaceholder() {
    entity.setDisplayName("NoPlaceholder");
    List<String> result = service.getDisplayNamesWithClientId(List.of(entity), "id", "name");
    assertTrue(result.get(0).startsWith("NoPlaceholder"));
}

@Test
void testTransformEntityFields_EmptyClientIdName() {
    entity.setDisplayName("Group-<ClientID>");
    entity.setDescription("Desc-<ClientID>-<ClientName>");
    List<SecurityManagerEntitlementEntity> entities = List.of(entity);
    Map<SecurityManagerEntitlementEntity, Map<String, String>> result =
            AsyncGroupServiceImpl.transformEntityFields(entities, "", "");
    assertEquals("Group-", result.get(entity).get("displayName"));
    assertEquals("Desc--", result.get(entity).get("description"));
}

@Test
void testTransformEntityFields_EntityWithNoDisplayNameOrDescription() {
    SecurityManagerEntitlementEntity e = new SecurityManagerEntitlementEntity();
    List<SecurityManagerEntitlementEntity> entities = List.of(e);
    Map<SecurityManagerEntitlementEntity, Map<String, String>> result =
            AsyncGroupServiceImpl.transformEntityFields(entities, "cid", "cname");
    assertEquals("", result.get(e).get("displayName"));
    assertEquals("", result.get(e).get("description"));
}

@Test
void testGetPresentValues_AllKeysMissing() {
    JSONObject json = new JSONObject();
    Map<String, String> result = service.getPresentValues(json);
    assertTrue(result.isEmpty());
}

@Test
void testGetPresentValues_SomeKeysPresent() {
    JSONObject json = new JSONObject();
    json.put("msg", "Partial");
    Map<String, String> result = service.getPresentValues(json);
    assertEquals("Partial", result.get("msg"));
    assertFalse(result.containsKey("errorCode"));
}

@Test
void testSaveTrack_TrackRepoThrowsException() throws Exception {
    CreateGroupsResponse response = new CreateGroupsResponse();
    response.setClientId("client123");
    RequestHeader header = new RequestHeader();
    header.setCorrelationId("corr123");
    String rawHeader = new ObjectMapper().writeValueAsString(header);

    when(trackRepo.findByCorrelationIdAndClientId("corr123", "client123")).thenThrow(new RuntimeException("DB error"));

    try (MockedStatic<StartAnywhereSecurityUtil> secUtil = mockStatic(StartAnywhereSecurityUtil.class)) {
        secUtil.when(() -> StartAnywhereSecurityUtil.unCleanIt(any())).thenReturn(rawHeader);
        try (MockedStatic<RequestHeader> reqHeader = mockStatic(RequestHeader.class)) {
            reqHeader.when(() -> RequestHeader.parse(any())).thenReturn(header);
            assertDoesNotThrow(() -> service.saveTrack(rawHeader, response));
        }
    }
}

@Test
void testUpdateTrack_EntityNull() throws Exception {
    CreateGroupsResponse response = new CreateGroupsResponse();
    response.setClientId("client123");
    RequestHeader header = new RequestHeader();
    header.setCorrelationId("corr123");
    String rawHeader = new ObjectMapper().writeValueAsString(header);

    when(trackRepo.findByCorrelationIdAndClientId("corr123", "client123")).thenReturn(null);

    try (MockedStatic<StartAnywhereSecurityUtil> secUtil = mockStatic(StartAnywhereSecurityUtil.class)) {
        secUtil.when(() -> StartAnywhereSecurityUtil.unCleanIt(any())).thenReturn(rawHeader);
        try (MockedStatic<RequestHeader> reqHeader = mockStatic(RequestHeader.class)) {
            reqHeader.when(() -> RequestHeader.parse(any())).thenReturn(header);
            assertDoesNotThrow(() -> service.updateTrack(rawHeader, response));
        }
    }
}

@Test
void testCheckValidationBeforeAsyncC_RepoThrowsException() {
    AsyncGroupServiceImpl service = spy(new AsyncGroupServiceImpl());
    doThrow(new RuntimeException("Repo error")).when(service.trackRepo).findByCorrelationIdAndClientId(anyString(), anyString());
    String requestHeader = "{}";
    CreateGroupsResponse response = service.checkValidationBeforeAsyncC("token", requestHeader, "client", "cname");
    assertNotNull(response);
}

@Test
void testCheckValidationBeforeAsyncC_StatustrackEntityNull() {
    AsyncGroupServiceImpl service = spy(new AsyncGroupServiceImpl());
    com.alight.cc.startanywhere.entity.ClientOnboardingRequestTrackEntity trackEntity =
            new com.alight.cc.startanywhere.entity.ClientOnboardingRequestTrackEntity();
    trackEntity.setStatus(0);
    trackEntity.setHitCount(1);
    doReturn(trackEntity).when(service.trackRepo).findByCorrelationIdAndClientId(anyString(), anyString());
    doReturn(null).when(service.trackRepo).findByClientId(anyString());
    doReturn(3).when(service.configBean).getHitCount();
    String requestHeader = "{}";
    CreateGroupsResponse result = service.checkValidationBeforeAsyncC("token", requestHeader, "client", "cname");
    assertNotNull(result);
}
